{"remainingRequest":"/home/cosmin/PycharmProjects/photoreact/front/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/cosmin/PycharmProjects/photoreact/front/node_modules/ts-loader/index.js??ref--4-3!/home/cosmin/PycharmProjects/photoreact/front/node_modules/tslint-loader/index.js!/home/cosmin/PycharmProjects/photoreact/front/src/serviceWorker.ts","dependencies":[{"path":"/home/cosmin/PycharmProjects/photoreact/front/src/serviceWorker.ts","mtime":1567163361003},{"path":"/home/cosmin/PycharmProjects/photoreact/front/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/home/cosmin/PycharmProjects/photoreact/front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cosmin/PycharmProjects/photoreact/front/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/cosmin/PycharmProjects/photoreact/front/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/cosmin/PycharmProjects/photoreact/front/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n        window.addEventListener('load', function () {\n            var swUrl = process.env.PUBLIC_URL + \"/service-worker.js\";\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(function () {\n                    console.log('This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA');\n                });\n            }\n            else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(function (registration) {\n        registration.onupdatefound = function () {\n            var installingWorker = registration.installing;\n            if (installingWorker == null) {\n                return;\n            }\n            installingWorker.onstatechange = function () {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log('New content is available and will be used when all ' +\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration);\n                        }\n                    }\n                    else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('Content is cached for offline use.');\n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration);\n                        }\n                    }\n                }\n            };\n        };\n    })\n        .catch(function (error) {\n        console.error('Error during service worker registration:', error);\n    });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(function (response) {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        var contentType = response.headers.get('content-type');\n        if (response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then(function (registration) {\n                registration.unregister().then(function () {\n                    window.location.reload();\n                });\n            });\n        }\n        else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n        }\n    })\n        .catch(function () {\n        console.log('No internet connection found. App is running in offline mode.');\n    });\n}\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(function (registration) {\n            registration.unregister();\n        });\n    }\n}\n",null]}